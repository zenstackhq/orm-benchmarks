//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

/* eslint-disable */

import { type SchemaDef, ExpressionUtils } from "@zenstackhq/runtime/schema";
export const schema = {
    provider: {
        type: "postgresql"
    },
    models: {
        Customer: {
            name: "Customer",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                createdAt: {
                    name: "createdAt",
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                name: {
                    name: "name",
                    type: "String",
                    optional: true
                },
                email: {
                    name: "email",
                    type: "String"
                },
                address: {
                    name: "address",
                    type: "Address",
                    optional: true,
                    relation: { opposite: "customer" }
                },
                isActive: {
                    name: "isActive",
                    type: "Boolean",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(false) }] }],
                    default: false
                },
                orders: {
                    name: "orders",
                    type: "Order",
                    array: true,
                    relation: { opposite: "customer" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" }
            }
        },
        Address: {
            name: "Address",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                street: {
                    name: "street",
                    type: "String",
                    optional: true
                },
                city: {
                    name: "city",
                    type: "String",
                    optional: true
                },
                postalCode: {
                    name: "postalCode",
                    type: "String",
                    optional: true
                },
                country: {
                    name: "country",
                    type: "String",
                    optional: true
                },
                customerId: {
                    name: "customerId",
                    type: "Int",
                    unique: true,
                    attributes: [{ name: "@unique" }],
                    foreignKeyFor: [
                        "customer"
                    ]
                },
                customer: {
                    name: "customer",
                    type: "Customer",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("customerId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "address", fields: ["customerId"], references: ["id"], onDelete: "Cascade" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" },
                customerId: { type: "Int" }
            }
        },
        Order: {
            name: "Order",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                date: {
                    name: "date",
                    type: "DateTime"
                },
                totalAmount: {
                    name: "totalAmount",
                    type: "Float"
                },
                customerId: {
                    name: "customerId",
                    type: "Int",
                    foreignKeyFor: [
                        "customer"
                    ]
                },
                customer: {
                    name: "customer",
                    type: "Customer",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("customerId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "orders", fields: ["customerId"], references: ["id"], onDelete: "Cascade" }
                },
                products: {
                    name: "products",
                    type: "Product",
                    array: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("OrderProducts") }] }],
                    relation: { opposite: "orders", name: "OrderProducts" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" }
            }
        },
        Product: {
            name: "Product",
            fields: {
                id: {
                    name: "id",
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                name: {
                    name: "name",
                    type: "String"
                },
                price: {
                    name: "price",
                    type: "Float"
                },
                quantity: {
                    name: "quantity",
                    type: "Int"
                },
                description: {
                    name: "description",
                    type: "String",
                    optional: true
                },
                orders: {
                    name: "orders",
                    type: "Order",
                    array: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("OrderProducts") }] }],
                    relation: { opposite: "products", name: "OrderProducts" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" }
            }
        }
    },
    plugins: {}
} as const satisfies SchemaDef;
export type SchemaType = typeof schema;
