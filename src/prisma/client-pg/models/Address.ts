
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Address` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Address
 * 
 */
export type AddressModel = runtime.Types.Result.DefaultSelection<Prisma.$AddressPayload>

export type AggregateAddress = {
  _count: AddressCountAggregateOutputType | null
  _avg: AddressAvgAggregateOutputType | null
  _sum: AddressSumAggregateOutputType | null
  _min: AddressMinAggregateOutputType | null
  _max: AddressMaxAggregateOutputType | null
}

export type AddressAvgAggregateOutputType = {
  id: number | null
  customerId: number | null
}

export type AddressSumAggregateOutputType = {
  id: number | null
  customerId: number | null
}

export type AddressMinAggregateOutputType = {
  id: number | null
  street: string | null
  city: string | null
  postalCode: string | null
  country: string | null
  customerId: number | null
}

export type AddressMaxAggregateOutputType = {
  id: number | null
  street: string | null
  city: string | null
  postalCode: string | null
  country: string | null
  customerId: number | null
}

export type AddressCountAggregateOutputType = {
  id: number
  street: number
  city: number
  postalCode: number
  country: number
  customerId: number
  _all: number
}


export type AddressAvgAggregateInputType = {
  id?: true
  customerId?: true
}

export type AddressSumAggregateInputType = {
  id?: true
  customerId?: true
}

export type AddressMinAggregateInputType = {
  id?: true
  street?: true
  city?: true
  postalCode?: true
  country?: true
  customerId?: true
}

export type AddressMaxAggregateInputType = {
  id?: true
  street?: true
  city?: true
  postalCode?: true
  country?: true
  customerId?: true
}

export type AddressCountAggregateInputType = {
  id?: true
  street?: true
  city?: true
  postalCode?: true
  country?: true
  customerId?: true
  _all?: true
}

export type AddressAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Address to aggregate.
   */
  where?: Prisma.AddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Addresses to fetch.
   */
  orderBy?: Prisma.AddressOrderByWithRelationInput | Prisma.AddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Addresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Addresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Addresses
  **/
  _count?: true | AddressCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AddressAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AddressSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AddressMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AddressMaxAggregateInputType
}

export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
      [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAddress[P]>
    : Prisma.GetScalarType<T[P], AggregateAddress[P]>
}




export type AddressGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AddressWhereInput
  orderBy?: Prisma.AddressOrderByWithAggregationInput | Prisma.AddressOrderByWithAggregationInput[]
  by: Prisma.AddressScalarFieldEnum[] | Prisma.AddressScalarFieldEnum
  having?: Prisma.AddressScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AddressCountAggregateInputType | true
  _avg?: AddressAvgAggregateInputType
  _sum?: AddressSumAggregateInputType
  _min?: AddressMinAggregateInputType
  _max?: AddressMaxAggregateInputType
}

export type AddressGroupByOutputType = {
  id: number
  street: string | null
  city: string | null
  postalCode: string | null
  country: string | null
  customerId: number
  _count: AddressCountAggregateOutputType | null
  _avg: AddressAvgAggregateOutputType | null
  _sum: AddressSumAggregateOutputType | null
  _min: AddressMinAggregateOutputType | null
  _max: AddressMaxAggregateOutputType | null
}

type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AddressGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AddressGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AddressGroupByOutputType[P]>
      }
    >
  >



export type AddressWhereInput = {
  AND?: Prisma.AddressWhereInput | Prisma.AddressWhereInput[]
  OR?: Prisma.AddressWhereInput[]
  NOT?: Prisma.AddressWhereInput | Prisma.AddressWhereInput[]
  id?: Prisma.IntFilter<"Address"> | number
  street?: Prisma.StringNullableFilter<"Address"> | string | null
  city?: Prisma.StringNullableFilter<"Address"> | string | null
  postalCode?: Prisma.StringNullableFilter<"Address"> | string | null
  country?: Prisma.StringNullableFilter<"Address"> | string | null
  customerId?: Prisma.IntFilter<"Address"> | number
  customer?: Prisma.XOR<Prisma.CustomerScalarRelationFilter, Prisma.CustomerWhereInput>
}

export type AddressOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  street?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  postalCode?: Prisma.SortOrderInput | Prisma.SortOrder
  country?: Prisma.SortOrderInput | Prisma.SortOrder
  customerId?: Prisma.SortOrder
  customer?: Prisma.CustomerOrderByWithRelationInput
}

export type AddressWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  customerId?: number
  AND?: Prisma.AddressWhereInput | Prisma.AddressWhereInput[]
  OR?: Prisma.AddressWhereInput[]
  NOT?: Prisma.AddressWhereInput | Prisma.AddressWhereInput[]
  street?: Prisma.StringNullableFilter<"Address"> | string | null
  city?: Prisma.StringNullableFilter<"Address"> | string | null
  postalCode?: Prisma.StringNullableFilter<"Address"> | string | null
  country?: Prisma.StringNullableFilter<"Address"> | string | null
  customer?: Prisma.XOR<Prisma.CustomerScalarRelationFilter, Prisma.CustomerWhereInput>
}, "id" | "customerId">

export type AddressOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  street?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  postalCode?: Prisma.SortOrderInput | Prisma.SortOrder
  country?: Prisma.SortOrderInput | Prisma.SortOrder
  customerId?: Prisma.SortOrder
  _count?: Prisma.AddressCountOrderByAggregateInput
  _avg?: Prisma.AddressAvgOrderByAggregateInput
  _max?: Prisma.AddressMaxOrderByAggregateInput
  _min?: Prisma.AddressMinOrderByAggregateInput
  _sum?: Prisma.AddressSumOrderByAggregateInput
}

export type AddressScalarWhereWithAggregatesInput = {
  AND?: Prisma.AddressScalarWhereWithAggregatesInput | Prisma.AddressScalarWhereWithAggregatesInput[]
  OR?: Prisma.AddressScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AddressScalarWhereWithAggregatesInput | Prisma.AddressScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Address"> | number
  street?: Prisma.StringNullableWithAggregatesFilter<"Address"> | string | null
  city?: Prisma.StringNullableWithAggregatesFilter<"Address"> | string | null
  postalCode?: Prisma.StringNullableWithAggregatesFilter<"Address"> | string | null
  country?: Prisma.StringNullableWithAggregatesFilter<"Address"> | string | null
  customerId?: Prisma.IntWithAggregatesFilter<"Address"> | number
}

export type AddressCreateInput = {
  street?: string | null
  city?: string | null
  postalCode?: string | null
  country?: string | null
  customer: Prisma.CustomerCreateNestedOneWithoutAddressInput
}

export type AddressUncheckedCreateInput = {
  id?: number
  street?: string | null
  city?: string | null
  postalCode?: string | null
  country?: string | null
  customerId: number
}

export type AddressUpdateInput = {
  street?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  customer?: Prisma.CustomerUpdateOneRequiredWithoutAddressNestedInput
}

export type AddressUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  street?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  customerId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AddressCreateManyInput = {
  id?: number
  street?: string | null
  city?: string | null
  postalCode?: string | null
  country?: string | null
  customerId: number
}

export type AddressUpdateManyMutationInput = {
  street?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AddressUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  street?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  customerId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AddressNullableScalarRelationFilter = {
  is?: Prisma.AddressWhereInput | null
  isNot?: Prisma.AddressWhereInput | null
}

export type AddressCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  street?: Prisma.SortOrder
  city?: Prisma.SortOrder
  postalCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
}

export type AddressAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
}

export type AddressMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  street?: Prisma.SortOrder
  city?: Prisma.SortOrder
  postalCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
}

export type AddressMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  street?: Prisma.SortOrder
  city?: Prisma.SortOrder
  postalCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
}

export type AddressSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
}

export type AddressCreateNestedOneWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.AddressCreateWithoutCustomerInput, Prisma.AddressUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.AddressCreateOrConnectWithoutCustomerInput
  connect?: Prisma.AddressWhereUniqueInput
}

export type AddressUncheckedCreateNestedOneWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.AddressCreateWithoutCustomerInput, Prisma.AddressUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.AddressCreateOrConnectWithoutCustomerInput
  connect?: Prisma.AddressWhereUniqueInput
}

export type AddressUpdateOneWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.AddressCreateWithoutCustomerInput, Prisma.AddressUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.AddressCreateOrConnectWithoutCustomerInput
  upsert?: Prisma.AddressUpsertWithoutCustomerInput
  disconnect?: Prisma.AddressWhereInput | boolean
  delete?: Prisma.AddressWhereInput | boolean
  connect?: Prisma.AddressWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AddressUpdateToOneWithWhereWithoutCustomerInput, Prisma.AddressUpdateWithoutCustomerInput>, Prisma.AddressUncheckedUpdateWithoutCustomerInput>
}

export type AddressUncheckedUpdateOneWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.AddressCreateWithoutCustomerInput, Prisma.AddressUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.AddressCreateOrConnectWithoutCustomerInput
  upsert?: Prisma.AddressUpsertWithoutCustomerInput
  disconnect?: Prisma.AddressWhereInput | boolean
  delete?: Prisma.AddressWhereInput | boolean
  connect?: Prisma.AddressWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AddressUpdateToOneWithWhereWithoutCustomerInput, Prisma.AddressUpdateWithoutCustomerInput>, Prisma.AddressUncheckedUpdateWithoutCustomerInput>
}

export type AddressCreateWithoutCustomerInput = {
  street?: string | null
  city?: string | null
  postalCode?: string | null
  country?: string | null
}

export type AddressUncheckedCreateWithoutCustomerInput = {
  id?: number
  street?: string | null
  city?: string | null
  postalCode?: string | null
  country?: string | null
}

export type AddressCreateOrConnectWithoutCustomerInput = {
  where: Prisma.AddressWhereUniqueInput
  create: Prisma.XOR<Prisma.AddressCreateWithoutCustomerInput, Prisma.AddressUncheckedCreateWithoutCustomerInput>
}

export type AddressUpsertWithoutCustomerInput = {
  update: Prisma.XOR<Prisma.AddressUpdateWithoutCustomerInput, Prisma.AddressUncheckedUpdateWithoutCustomerInput>
  create: Prisma.XOR<Prisma.AddressCreateWithoutCustomerInput, Prisma.AddressUncheckedCreateWithoutCustomerInput>
  where?: Prisma.AddressWhereInput
}

export type AddressUpdateToOneWithWhereWithoutCustomerInput = {
  where?: Prisma.AddressWhereInput
  data: Prisma.XOR<Prisma.AddressUpdateWithoutCustomerInput, Prisma.AddressUncheckedUpdateWithoutCustomerInput>
}

export type AddressUpdateWithoutCustomerInput = {
  street?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AddressUncheckedUpdateWithoutCustomerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  street?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type AddressSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  street?: boolean
  city?: boolean
  postalCode?: boolean
  country?: boolean
  customerId?: boolean
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["address"]>

export type AddressSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  street?: boolean
  city?: boolean
  postalCode?: boolean
  country?: boolean
  customerId?: boolean
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["address"]>

export type AddressSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  street?: boolean
  city?: boolean
  postalCode?: boolean
  country?: boolean
  customerId?: boolean
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["address"]>

export type AddressSelectScalar = {
  id?: boolean
  street?: boolean
  city?: boolean
  postalCode?: boolean
  country?: boolean
  customerId?: boolean
}

export type AddressOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "street" | "city" | "postalCode" | "country" | "customerId", ExtArgs["result"]["address"]>
export type AddressInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
}
export type AddressIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
}
export type AddressIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
}

export type $AddressPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Address"
  objects: {
    customer: Prisma.$CustomerPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    street: string | null
    city: string | null
    postalCode: string | null
    country: string | null
    customerId: number
  }, ExtArgs["result"]["address"]>
  composites: {}
}

export type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AddressPayload, S>

export type AddressCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: AddressCountAggregateInputType | true
  }

export interface AddressDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
  /**
   * Find zero or one Address that matches the filter.
   * @param {AddressFindUniqueArgs} args - Arguments to find a Address
   * @example
   * // Get one Address
   * const address = await prisma.address.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AddressFindUniqueArgs>(args: Prisma.SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Address that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
   * @example
   * // Get one Address
   * const address = await prisma.address.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Address that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddressFindFirstArgs} args - Arguments to find a Address
   * @example
   * // Get one Address
   * const address = await prisma.address.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AddressFindFirstArgs>(args?: Prisma.SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Address that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
   * @example
   * // Get one Address
   * const address = await prisma.address.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Addresses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Addresses
   * const addresses = await prisma.address.findMany()
   * 
   * // Get first 10 Addresses
   * const addresses = await prisma.address.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AddressFindManyArgs>(args?: Prisma.SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Address.
   * @param {AddressCreateArgs} args - Arguments to create a Address.
   * @example
   * // Create one Address
   * const Address = await prisma.address.create({
   *   data: {
   *     // ... data to create a Address
   *   }
   * })
   * 
   */
  create<T extends AddressCreateArgs>(args: Prisma.SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Addresses.
   * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
   * @example
   * // Create many Addresses
   * const address = await prisma.address.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AddressCreateManyArgs>(args?: Prisma.SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Addresses and returns the data saved in the database.
   * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
   * @example
   * // Create many Addresses
   * const address = await prisma.address.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Addresses and only return the `id`
   * const addressWithIdOnly = await prisma.address.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Address.
   * @param {AddressDeleteArgs} args - Arguments to delete one Address.
   * @example
   * // Delete one Address
   * const Address = await prisma.address.delete({
   *   where: {
   *     // ... filter to delete one Address
   *   }
   * })
   * 
   */
  delete<T extends AddressDeleteArgs>(args: Prisma.SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Address.
   * @param {AddressUpdateArgs} args - Arguments to update one Address.
   * @example
   * // Update one Address
   * const address = await prisma.address.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AddressUpdateArgs>(args: Prisma.SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Addresses.
   * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
   * @example
   * // Delete a few Addresses
   * const { count } = await prisma.address.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AddressDeleteManyArgs>(args?: Prisma.SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Addresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Addresses
   * const address = await prisma.address.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AddressUpdateManyArgs>(args: Prisma.SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Addresses and returns the data updated in the database.
   * @param {AddressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
   * @example
   * // Update many Addresses
   * const address = await prisma.address.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Addresses and only return the `id`
   * const addressWithIdOnly = await prisma.address.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AddressUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Address.
   * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
   * @example
   * // Update or create a Address
   * const address = await prisma.address.upsert({
   *   create: {
   *     // ... data to create a Address
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Address we want to update
   *   }
   * })
   */
  upsert<T extends AddressUpsertArgs>(args: Prisma.SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Addresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
   * @example
   * // Count the number of Addresses
   * const count = await prisma.address.count({
   *   where: {
   *     // ... the filter for the Addresses we want to count
   *   }
   * })
  **/
  count<T extends AddressCountArgs>(
    args?: Prisma.Subset<T, AddressCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AddressCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Address.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AddressAggregateArgs>(args: Prisma.Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

  /**
   * Group by Address.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddressGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AddressGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AddressGroupByArgs['orderBy'] }
      : { orderBy?: AddressGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Address model
 */
readonly fields: AddressFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Address.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AddressClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  customer<T extends Prisma.CustomerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CustomerDefaultArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Address model
 */
export interface AddressFieldRefs {
  readonly id: Prisma.FieldRef<"Address", 'Int'>
  readonly street: Prisma.FieldRef<"Address", 'String'>
  readonly city: Prisma.FieldRef<"Address", 'String'>
  readonly postalCode: Prisma.FieldRef<"Address", 'String'>
  readonly country: Prisma.FieldRef<"Address", 'String'>
  readonly customerId: Prisma.FieldRef<"Address", 'Int'>
}
    

// Custom InputTypes
/**
 * Address findUnique
 */
export type AddressFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * Filter, which Address to fetch.
   */
  where: Prisma.AddressWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address findUniqueOrThrow
 */
export type AddressFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * Filter, which Address to fetch.
   */
  where: Prisma.AddressWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address findFirst
 */
export type AddressFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * Filter, which Address to fetch.
   */
  where?: Prisma.AddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Addresses to fetch.
   */
  orderBy?: Prisma.AddressOrderByWithRelationInput | Prisma.AddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Addresses.
   */
  cursor?: Prisma.AddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Addresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Addresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Addresses.
   */
  distinct?: Prisma.AddressScalarFieldEnum | Prisma.AddressScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address findFirstOrThrow
 */
export type AddressFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * Filter, which Address to fetch.
   */
  where?: Prisma.AddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Addresses to fetch.
   */
  orderBy?: Prisma.AddressOrderByWithRelationInput | Prisma.AddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Addresses.
   */
  cursor?: Prisma.AddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Addresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Addresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Addresses.
   */
  distinct?: Prisma.AddressScalarFieldEnum | Prisma.AddressScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address findMany
 */
export type AddressFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * Filter, which Addresses to fetch.
   */
  where?: Prisma.AddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Addresses to fetch.
   */
  orderBy?: Prisma.AddressOrderByWithRelationInput | Prisma.AddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Addresses.
   */
  cursor?: Prisma.AddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Addresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Addresses.
   */
  skip?: number
  distinct?: Prisma.AddressScalarFieldEnum | Prisma.AddressScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address create
 */
export type AddressCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * The data needed to create a Address.
   */
  data: Prisma.XOR<Prisma.AddressCreateInput, Prisma.AddressUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address createMany
 */
export type AddressCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Addresses.
   */
  data: Prisma.AddressCreateManyInput | Prisma.AddressCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Address createManyAndReturn
 */
export type AddressCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * The data used to create many Addresses.
   */
  data: Prisma.AddressCreateManyInput | Prisma.AddressCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Address update
 */
export type AddressUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * The data needed to update a Address.
   */
  data: Prisma.XOR<Prisma.AddressUpdateInput, Prisma.AddressUncheckedUpdateInput>
  /**
   * Choose, which Address to update.
   */
  where: Prisma.AddressWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address updateMany
 */
export type AddressUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Addresses.
   */
  data: Prisma.XOR<Prisma.AddressUpdateManyMutationInput, Prisma.AddressUncheckedUpdateManyInput>
  /**
   * Filter which Addresses to update
   */
  where?: Prisma.AddressWhereInput
  /**
   * Limit how many Addresses to update.
   */
  limit?: number
}

/**
 * Address updateManyAndReturn
 */
export type AddressUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * The data used to update Addresses.
   */
  data: Prisma.XOR<Prisma.AddressUpdateManyMutationInput, Prisma.AddressUncheckedUpdateManyInput>
  /**
   * Filter which Addresses to update
   */
  where?: Prisma.AddressWhereInput
  /**
   * Limit how many Addresses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Address upsert
 */
export type AddressUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * The filter to search for the Address to update in case it exists.
   */
  where: Prisma.AddressWhereUniqueInput
  /**
   * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
   */
  create: Prisma.XOR<Prisma.AddressCreateInput, Prisma.AddressUncheckedCreateInput>
  /**
   * In case the Address was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AddressUpdateInput, Prisma.AddressUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address delete
 */
export type AddressDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
  /**
   * Filter which Address to delete.
   */
  where: Prisma.AddressWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Address deleteMany
 */
export type AddressDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Addresses to delete
   */
  where?: Prisma.AddressWhereInput
  /**
   * Limit how many Addresses to delete.
   */
  limit?: number
}

/**
 * Address without action
 */
export type AddressDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Address
   */
  select?: Prisma.AddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Address
   */
  omit?: Prisma.AddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddressInclude<ExtArgs> | null
}
